knitr::opts_chunk$set(echo = TRUE)
# when h = 1
(xi <- c(2.1, 2.2, 2.3, 2.4, 2.6, 2.7, 3.2, 3.3, 3.6, 3.7))
(n <- length(xi))
(x <- seq(from = min(xi) - 1, to = max(xi) + 1, length.out = 800))
h <- 1
par(mfrow=c(1, 2))
TriangularKDF <- function(x){1-abs(x)}
KDF<-TriangularKDF
with(data = xi,
hist(waiting, freq = FALSE, col="grey95"))
df<-read.csv("C:/Users/nvami/OneDrive/Documents/ExamData.csv")
df<-as_tibble(df)
library(tidyverse)
df<-read.csv("C:/Users/nvami/OneDrive/Documents/ExamData.csv")
df<-as_tibble(df)
df.head()
view(df)
mean(df$Score)
mean(df$StudyHrs)
df <- transform(df, Score2= (Score-mean(df$Score)))
df.view()
view(df)
df <- transform(df, StudyHrs2= (StudyHrs-mean(df$StudyHrs)))
view(df)
mean(df$Score2)
var(df$Score2)
var(df$Score)
df <- transform(df, Score3= (Score2/sd(df$Score)))
df <- transform(df, StudyHrs3= (StudyHrs2/sd(df$StudyHrs)))
view(df)
mean(df$StudyHrs3)
mean(df$Score3)
cor(df$Score3, df$StudyHrs3)
cov(df)
sd(df$Score3)
mean(df$Score3)
sd(df$StudyHrs3)
mean(df$StudyHrs3)
plot(df$Score, df$StudyHrs)
plot(df$Score2, df$StudyHrs2)
plot(df$Score3, df$StudyHrs3)
library(stringr)
library(utils)
library(plotrix)
PDF <- function(x) {
return(log10(1+1/x))
}
weighted.hist(1:9, PDF(1:9), breaks = 1:10)
CDF <- function(x) {
return(log10(x+1))
}
curve(CDF, 1, 9)
sample_data = read.table ('C:/Users/nvami/OneDrive/Desktop/Amith/MS/CUB/Boulder Course Material/STAT5000/Assignments/Module 2 (week3-4)/Assignment/taxDataset for Mod 2 HW.txt', header = TRUE, sep = "\t")
typeof(sample_data)
lst2 <- unlist(sample_data, use.names = FALSE)
lst2
out <- str_extract(lst2, "^\\d{1}")
out_num <- as.numeric(out)
hist(out_num)
plot(ecdf(out_num))
knitr::opts_chunk$set(echo = TRUE)
ggplot(pol, aes(sample = o3.mean)) + stat_qq(alpha=0.3, colour = 8) + stat_qq_line(colour="black") + ylab("O3 Mean") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("QQ Plot of O3 Mean") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
library(tidyverse)
df<-read.csv("C:/Users/nvami/OneDrive/Desktop/Amith/MS/CUB/Boulder Course Material/STAT5000/Assignments/Week 1-2/Project Final/Project/pollution_us_2000_2016.csv")
df<-as_tibble(df)
names(df) <- tolower(names(df))
colnames(df)[which(names(df) == "date.local")] <- "date"
df$year <- format(as.Date(df$date,format="%Y-%m-%d"),"%Y")
df$month <- format(as.Date(df$date,format="%Y-%m-%d"),"%m")
pol <- df[complete.cases(df),] %>% distinct(state,year,month,.keep_all = TRUE)
data_of_five_states<-pol[pol$state %in% c("Texas","Arizona","California","Colorado","Florida"),]
ip_pdf <- function(x) {
y <- (1 - x^2)
y[x < -1 | x > 1] <- 0
return(y)
}
pdf_int <- integrate(ip_pdf, lower = -Inf, upper = Inf)$value
pdf_int
k <- solve(pdf_int, 1)
k
pdf <- function(x) {
y <- 3 / 4 * (1 - x^2)
y[x < -1 | x > 1] <- 0
return(y)
}
CDF <- function(x) {
y <- -x^3 / 4 + 3 * x / 4 + 1 / 2
y[x <= -1] <- 0
y[x > 1] <- 1
return(y)
}
## Using PDF
prob_0.5_X_1_PDF <- integrate(pdf, lower = -0.5, upper = 1)
prob_0.5_X_1_PDF$value
## Using CDF
prob_0.5_X_1_CDF <- CDF(1) - CDF(-0.5)
prob_0.5_X_1_CDF
opar <- par(no.readonly = TRUE) # read current parameters
par(mfrow = c(1, 2))
curve(pdf, -2, 2, xlab = "x", ylab = "f(x)", main = "PDF for X")
curve(CDF, -2, 2, xlab = "x", ylab = "F(x)", main = "CDF for X")
par(opar)
# Assignment - 1: R Part
library(tidyverse)
set.seed(5)
x<-sample(pol$no2.mean,size=50)
# Assignment - 1: R Part
library(tidyverse)
library(ggplot2)
library(ggridges)
library(ggpubr)
df<-read.csv("C:/Users/Amith Nandivada/Desktop/Amith/MS/CUB/Boulder Course Material/STAT5000/Assignments/Week 1-2/Project Final/Project/pollution_us_2000_2016.csv")
df<-as_tibble(df)
names(df) <- tolower(names(df))
colnames(df)[which(names(df) == "date.local")] <- "date"
df$year <- format(as.Date(df$date,format="%Y-%m-%d"),"%Y")
df$month <- format(as.Date(df$date,format="%Y-%m-%d"),"%m")
pol <- df[complete.cases(df),] %>% distinct(state,year,month,.keep_all = TRUE)
data_of_five_states<-pol[pol$state %in% c("Texas","Arizona","California","Colorado","Florida"),]
ggplot(data=pol,mapping=aes(x=state,y=no2.mean))+geom_bar(stat="summary",fill="steelblue")+theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ylab("NO2 Mean") +ggtitle("NO2 Mean Across All US States")+theme(plot.title=element_text(color="black", size=14,face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"),axis.title.y = element_text(color="black", size=14, face="bold"))
ggplot(data=pol,mapping=aes(x=month,y=no2.mean))+ geom_bar(stat="summary",fill="grey")+theme(axis.text.x=element_text(angle=90,vjust=0.5))+ ggtitle("NO2 Mean Value monthly")+ylab("NO2 Mean")+ theme(plot.title=element_text(color="black",size=14,face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"),axis.title.y=element_text(color="black",size=14,face="bold"))
ggplot(data=data_of_five_states,mapping=aes(x=state,y=co.mean,fill=state))+geom_boxplot(alpha=0.3)+ylab("CO Mean") + ggtitle("CO Mean of 5 US States") + theme(plot.title =element_text(color="black",size=14,face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black", size=14, face="bold"),axis.title.y = element_text(color="black", size=14, face="bold"))
ggplot(data=data_of_five_states,mapping=aes(x=state,y=o3.mean,fill=state))+geom_violin()+ stat_summary(fun="mean") + ylab("O3 Mean")+ggtitle("O3 Mean of 5 US States")+theme(plot.title=element_text(color="black",size=14,face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"),axis.title.y=element_text(color="black",size=14,face="bold"))
ggplot(pol,mapping=aes(x=so2.mean)) + geom_histogram() + xlab("SO2 Mean") + ggtitle("SO2 Meandistribution")+theme(plot.title = element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14, face="bold"),axis.title.y = element_text(color="black", size=14, face="bold"))
ggplot(data_of_five_states,aes(x=o3.aqi))+geom_density(aes(group=state,color=state,fill=state),alpha=0.3) + xlab("O3 Air Quality Index") + ggtitle("O3 Air Quality Index of 5 US States")+theme(plot.title=element_text(color="black",size=14,face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"),axis.title.y=element_text(color="black", size=14, face="bold"))
ggplot(pol,mapping=aes(x=no2.mean,y=so2.mean))+geom_point()+xlab("No2Mean")+ylab("SO2Mean")+ggtitle("Scatter plot of NO2 Vs SO2 Mean")+theme(plot.title = element_text(color="black",size=14,face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black", size=14, face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
ggplot(data=pol%>%group_by(year)%>%summarise(co=mean(co.mean)),mapping=aes(x=year,y=co,group=1))+ geom_line(color="#00AFBB", size = 2) + geom_point() + ylab("CO Mean")+ggtitle("CO Mean Value Over Years") + theme(plot.title=element_text(color="black",size=14,face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"),axis.title.y=element_text(color="black", size=14, face="bold"))
ggplot(pol,aes(x=no2.aqi))+geom_area(stat="bin",linetype="dashed",fill="lightblue",color="black")+geom_vline(aes(xintercept=mean(no2.aqi)),color="blue",linetype="dashed", size=1) +  xlab("NO2 Air Quality Index") + ggtitle("NO2 Air Quality Index distirbution Area Graph")+ theme(plot.title=element_text(color="black",size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"),axis.title.y = element_text(color="black", size=14, face="bold"))
pie_temp<-pol%>%group_by(state,county)%>%summarise_at(vars(no2.mean),list(no2_mean_per_county=mean))
pie_temp[pie_temp$state=='Texas',]%>%ggplot(aes(x="",y=no2_mean_per_county,fill=county))+geom_col(color="black")+ geom_text(aes(label=round(no2_mean_per_county,digit=2)),position=position_stack(vjust=0.5))+coord_polar(theta="y")+ scale_fill_brewer() + theme_bw() + ylab("")+xlab("O3 Mean Per County")+ggtitle("")+theme(plot.title = element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"),axis.title.y=element_text(color="black", size=14, face="bold"))
ggplot(data=data_of_five_states,mapping = aes(x=state,y=so2.mean,color=state)) + geom_point()+ ggtitle("SO2 Mean of 5 US States")+theme(plot.title =element_text(color="black",size=14,face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"),axis.title.y= element_text(color="black", size=14, face="bold")) +ylab("so2 mean")
# Assignment - 2: R Part
library(tidyverse)
df<-read.csv("C:/Users/Amith Nandivada/Desktop/Amith/MS/CUB/Boulder Course Material/STAT5000/Assignments/Week 1-2/Project Final/Project/pollution_us_2000_2016.csv")
df<-as_tibble(df)
names(df) <- tolower(names(df))
colnames(df)[which(names(df) == "date.local")] <- "date"
df$year <- format(as.Date(df$date,format="%Y-%m-%d"),"%Y")
df$month <- format(as.Date(df$date,format="%Y-%m-%d"),"%m")
pol <- df[complete.cases(df),] %>% distinct(state,year,month,.keep_all = TRUE)
data_of_five_states<-pol[pol$state %in% c("Texas","Arizona","California","Colorado","Florida"),]
# Step - 1
find_mode <- function(x) {
u <- unique(x)
tab <- tabulate(match(x, u))
u[tab == max(tab)]
}
cols_mean = apply(X=pol[, c("no2.aqi", "o3.aqi", "so2.aqi", "co.aqi", "o3.mean")], 2, mean)
cols_median = apply(X=pol[, c("no2.aqi", "o3.aqi", "so2.aqi", "co.aqi", "o3.mean")], 2, median)
cols_mode = apply(X=pol[, c("no2.aqi", "o3.aqi", "so2.aqi", "co.aqi", "o3.mean")], 2, find_mode)
cols_range = apply(X=pol[, c("no2.aqi", "o3.aqi", "so2.aqi", "co.aqi", "o3.mean")], 2, range)
cols_variance = apply(X=pol[, c("no2.aqi", "o3.aqi", "so2.aqi", "co.aqi", "o3.mean")], 2, var)
cols_stddev = apply(X=pol[, c("no2.aqi", "o3.aqi", "so2.aqi", "co.aqi", "o3.mean")], 2, sd)
cols_quartiles = apply(X=pol[, c("no2.aqi", "o3.aqi", "so2.aqi", "co.aqi", "o3.mean")], 2, quantile)
cols_iqr = apply(X=pol[, c("no2.aqi", "o3.aqi", "so2.aqi", "co.aqi", "o3.mean")], 2, IQR)
cols_mean
cols_median
cols_mode
cols_range
cols_variance
cols_stddev
cols_quartiles
cols_iqr
# Step - 2: Histograms
library(ggplot2)
# NO2 AQI - Bin Size 15
ggplot(data=pol, mapping=aes(x=no2.aqi)) + geom_histogram(colour = 4, fill = "grey", bins = 15) + xlab("NO2 AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of NO2 AQI with Bin size of 15") + theme(plot.title=element_text(color="black", size=14, face="bold.italic", hjust=0.5), axis.title.x=element_text(color="black", size=14, face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# NO2 AQI - Bin Size 30
ggplot(data=pol, mapping=aes(x=no2.aqi)) + geom_histogram(colour = 4, fill = "grey", bins = 30) + xlab("NO2 AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of NO2 AQI with Bin size of 30") + theme(plot.title=element_text(color="black", size=14, face="bold.italic", hjust=0.5), axis.title.x=element_text(color="black", size=14, face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# NO2 AQI - Bin Size 50
ggplot(data=pol, mapping=aes(x=no2.aqi)) + geom_histogram(colour = 4, fill = "grey", bins = 50) + xlab("NO2 AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of NO2 AQI with Bin size of 50") + theme(plot.title=element_text(color="black", size=14, face="bold.italic", hjust=0.5), axis.title.x=element_text(color="black", size=14, face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# O3 AQI - Bin Size 15
ggplot(data=pol, mapping=aes(x=o3.aqi)) + geom_histogram(colour = 5, fill = "blue", bins = 15) + xlab("O3 AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of O3 AQI with Bin size of 15") + theme(plot.title=element_text(color="black", size=14, face="bold.italic", hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# O3 AQI - Bin Size 30
ggplot(data=pol, mapping=aes(x=o3.aqi)) + geom_histogram(colour = 5, fill = "blue", bins = 30) + xlab("O3 AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of O3 AQI with Bin size of 30") + theme(plot.title=element_text(color="black", size=14, face="bold.italic", hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# O3 AQI - Bin Size 50
ggplot(data=pol, mapping=aes(x=o3.aqi)) + geom_histogram(colour = 5, fill = "blue", bins = 50) + xlab("O3 AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of O3 AQI with Bin size of 50") + theme(plot.title=element_text(color="black", size=14, face="bold.italic", hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# SO2 AQI - Bin Size 15
ggplot(data=pol, mapping=aes(x=so2.aqi)) + geom_histogram(colour = 4, fill = "red", bins = 15) + xlab("SO2 AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of SO2 AQI with Bin size of 15") + theme(plot.title=element_text(color="black", size=14, face="bold.italic", hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# SO2 AQI - Bin Size 30
ggplot(data=pol, mapping=aes(x=so2.aqi)) + geom_histogram(colour = 4, fill = "red", bins = 30) + xlab("SO2 AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of SO2 AQI with Bin size of 30") + theme(plot.title=element_text(color="black", size=14, face="bold.italic", hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# SO2 AQI - Bin Size 50
ggplot(data=pol, mapping=aes(x=so2.aqi)) + geom_histogram(colour = 4, fill = "red", bins = 50) + xlab("SO2 AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of SO2 AQI with Bin size of 50") + theme(plot.title=element_text(color="black", size=14, face="bold.italic", hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# CO AQI - Bin Size 15
ggplot(data=pol, mapping=aes(x=co.aqi)) + geom_histogram(colour = 5, fill = "black", bins = 15) + xlab("CO AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of CO AQI with Bin size of 15") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# CO AQI - Bin Size 30
ggplot(data=pol, mapping=aes(x=co.aqi)) + geom_histogram(colour = 5, fill = "black", bins = 30) + xlab("CO AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of CO AQI with Bin size of 30") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# CO AQI - Bin Size 50
ggplot(data=pol, mapping=aes(x=co.aqi)) + geom_histogram(colour = 5, fill = "black", bins = 50) + xlab("CO AQI") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of CO AQI with Bin size of 50") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# O3 Mean - Bin Size 15
ggplot(data=pol, mapping=aes(x=o3.mean)) + geom_histogram(colour = 5, fill = "white", bins = 15) + xlab("O3 Mean") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of O3 Mean column with Bin size of 15") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# O3 Mean - Bin Size 30
ggplot(data=pol, mapping=aes(x=o3.mean)) + geom_histogram(colour = 5, fill = "white", bins = 30) + xlab("O3 Mean") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of O3 Mean column with Bin size of 30") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# O3 Mean - Bin Size 50
ggplot(data=pol, mapping=aes(x=o3.mean)) + geom_histogram(colour = 5, fill = "white", bins = 50) + xlab("O3 Mean") + ylab("Count") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Histogram of O3 Mean column with Bin size of 50") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# Step - 3: Box plots
# NO2 AQI - Box plot
ggplot(data=pol, mapping=aes(x="", y=no2.aqi)) + geom_boxplot(alpha=0.3, colour = 4, fill = "grey") + stat_summary(geom="text", fun=quantile ,aes(label=sprintf("%1.1f", ..y..)), position=position_nudge(x=0.43), size=3) + ylab("NO2 AQI") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Boxplot of NO2 AQI with Quartiles") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# O3 AQI - Box plot
ggplot(data=pol, mapping=aes(x="", y=o3.aqi)) + geom_boxplot(alpha=0.3, colour = 5, fill = "blue") + stat_summary(geom="text", fun=quantile ,aes(label=sprintf("%1.1f", ..y..)), position=position_nudge(x=0.43), size=3) + ylab("O3 AQI") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Boxplot of O3 AQI with Quartiles") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# SO2 AQI - Box plot
# Change y axis length for this graph later.
ggplot(data=pol, mapping=aes(x="", y=so2.aqi)) + geom_boxplot(alpha=0.3, colour = 4, fill = "red") + stat_summary(geom="text", fun=quantile ,aes(label=sprintf("%1.1f", ..y..)), position=position_nudge(x=0.43), size=3) + ylab("SO2 AQI") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Boxplot of SO2 AQI with Quartiles") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# CO AQI - Box plot
ggplot(data=pol, mapping=aes(x="", y=co.aqi)) + geom_boxplot(alpha=0.3, colour = 5, fill = "black") + stat_summary(geom="text", fun=quantile ,aes(label=sprintf("%1.1f", ..y..)), position=position_nudge(x=0.43), size=3) + ylab("CO AQI") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Boxplot of CO AQI with Quartiles") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# O3 Mean - Box plot
ggplot(data=pol, mapping=aes(x="", y=o3.mean)) + geom_boxplot(alpha=0.3, colour = 5, fill = "white") + stat_summary(geom="text", fun=quantile ,aes(label=sprintf("%1.1f", ..y..)), position=position_nudge(x=0.43), size=3) + ylab("O3 Mean") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("Boxplot of O3 Mean column with Quartiles") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# Step - 4: Kernel Density Functions
EpaKDF <- function(x){(3/4)*(1-(x^2))}
GaussianKDF <- function(x){1/sqrt(2*pi)*exp(-(x^2)/2)}
apply_KDF_to_col <- function(h, KDF, column){
xi <- c(column)
n <- length(xi)
x <- seq(from = min(xi) - 1, to = max(xi) + 1, length.out = 800)
Dist_around_xis <- sapply(xi, function(xi){(1/(h*n))*KDF((x - xi)/h)})
plot(x, apply(Dist_around_xis, 1, sum), type = "l", ylab = "", lwd = 2)
rug(xi, lwd = 2)
apply(Dist_around_xis, 2, function(z){lines(x, z)})
}
# Epanechnikov KDF Estimation for NO2 AQI
apply_KDF_to_col(1.5, EpaKDF, pol$no2.aqi) + title(main="Epanechnikov KDF for NO2 AQI")
# Gaussian KDF Estimation for NO2 AQI
apply_KDF_to_col(1.5, GaussianKDF, pol$no2.aqi) + title(main="Gaussian KDF for NO2 AQI")
# Epanechnikov KDF Estimation for O3 AQI
apply_KDF_to_col(1.5, EpaKDF, pol$o3.aqi) + title(main="Epanechnikov KDF for O3 AQI")
# Gaussian KDF Estimation for O3 AQI
apply_KDF_to_col(1.5, GaussianKDF, pol$o3.aqi) + title(main="Gaussian KDF for O3 AQI")
# Epanechnikov KDF Estimation for SO2 AQI
apply_KDF_to_col(1.5, EpaKDF, pol$so2.aqi) + title(main="Epanechnikov KDF for SO2 AQI")
# Gaussian KDF Estimation for SO2 AQI
apply_KDF_to_col(1.5, GaussianKDF, pol$so2.aqi) + title(main="Gaussian KDF for SO2 AQI")
# Epanechnikov KDF Estimation for CO AQI
apply_KDF_to_col(1.5, EpaKDF, pol$co.aqi) + title(main="Epanechnikov KDF for CO AQI")
# Gaussian KDF Estimation for CO AQI
apply_KDF_to_col(1.5, GaussianKDF, pol$co.aqi) + title(main="Gaussian KDF for CO AQI")
# Epanechnikov KDF Estimation for O3 Mean
apply_KDF_to_col(1.5, EpaKDF, pol$o3.mean) + title(main="Epanechnikov KDF for O3 Mean")
# Gaussian KDF Estimation for O3 Mean
apply_KDF_to_col(1.5, GaussianKDF, pol$o3.mean) + title(main="Gaussian KDF for O3 Mean")
# Step - 5: QQ Plots
# QQ Plot for NO2 AQI
ggplot(pol, aes(sample = no2.aqi)) + stat_qq(alpha=0.3, colour = 4) + stat_qq_line(colour="black")  + xlab("Normal Theoretical Quantiles") + ylab("NO2 AQI") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("QQ Plot of NO2 AQI") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# QQ Plot for O3 AQI
ggplot(pol, aes(sample = o3.aqi)) + stat_qq(alpha=0.3, colour = 5) + stat_qq_line(colour="black") + xlab("Normal Theoretical Quantiles") + ylab("O3 AQI") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("QQ Plot of O3 AQI") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# QQ Plot for SO2 AQI
ggplot(pol, aes(sample = so2.aqi)) + stat_qq(alpha=0.3, colour = 6) + stat_qq_line(colour="black") + xlab("Normal Theoretical Quantiles") + ylab("SO2 AQI") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("QQ Plot of SO2 AQI") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# QQ Plot for CO AQI
ggplot(pol, aes(sample = co.aqi)) + stat_qq(alpha=0.3, colour = 7) + stat_qq_line(colour="black") + xlab("Normal Theoretical Quantiles") + ylab("CO AQI") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("QQ Plot of CO AQI") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# QQ Plot for O3 Mean
ggplot(pol, aes(sample = o3.mean)) + stat_qq(alpha=0.3, colour = 8) + stat_qq_line(colour="black") + xlab("Normal Theoretical Quantiles") + ylab("O3 Mean") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + ggtitle("QQ Plot of O3 Mean") + theme(plot.title=element_text(color="black", size=14, face="bold.italic",hjust=0.5),axis.title.x=element_text(color="black",size=14,face="bold"), axis.title.y = element_text(color="black", size=14, face="bold"))
# Assignment - 3: R Part
# Relative Probability Distribution
library(tidyverse)
library(ggplot2)
library(ggridges)
library(ggpubr)
qqnorm(pol$no2.aqi, col = "skyblue3",
main = "pH Q-Q Plot")
qqline(pol$no2.aqi, col = "red", lwd = 3)
#ridgeline method
ggplot(data=data_of_five_states, aes(x=data_of_five_states$no2.aqi, y=state, fill=state)) +
geom_density_ridges_gradient() +
ggtitle("Distribution by State") +
xlab("NO2 AQI")
#histogram and density line
m <- mean(pol$no2.aqi)
std <- sqrt(var(pol$no2.aqi))
hist(pol$no2.aqi, col = "skyblue3", breaks = 30, prob = TRUE,
xlab = "NO2 AQI",
main = "Relative Probability Distribution")
lines(density(pol$no2.aqi), col = "red", lwd = 2)
curve(dnorm(x, mean = m, sd = std), col = "green", lwd = 2, add = TRUE,
yaxt = "n")
legend("topright",
inset = 0.05,
legend = c("Density Curve", "Normal Curve"),
lty = 1,
col = c("red", "green"),
cex = .75)
# Assignment 4 & 5:
# Hypothesis Testing:
library(BSDA)
nrow(pol) # We have 5085 rows in total population.
# z - test:
# We want a min sample size of more than 30 for z test. Let our sample size be 45
# no2_aqi_rs = sample_n(pol, 45, fac = "no2.aqi")$no2.aqi
set.seed(7)
no2_aqi_rs <- pol[sample(nrow(pol), size=45), ]$no2.aqi
no2_aqi_rs
# Check if sample size is normal.
qqnorm(no2_aqi_rs)
qqline(no2_aqi_rs)
# Since the data lies close to the line y=x and has no big deviations from the line,
# it’s fine to consider the sample as coming from a normal distribution.
# We can proceed further with our hypothesis test.
no2_aqi_rs_mean = mean(no2_aqi_rs)
no2_aqi_pop_sd = sd(pol$no2.aqi)
no2_aqi_pop_mean = mean(pol$no2.aqi)
no2_aqi_rs_mean
no2_aqi_pop_sd
no2_aqi_pop_mean
# One - Tailed z - Test:
z.test(x=no2_aqi_rs,
alternative='greater',
mu=no2_aqi_pop_mean,
sigma.x=no2_aqi_pop_sd,
conf.level = 0.95)
# Verify Z - Value
# We know that, Z = (xi-μ)/(σ/(√n)) - xi is sample mean, μ is population mean
# σ is population standard deviation, n is sample size
z_value = (no2_aqi_rs_mean - no2_aqi_pop_mean)/(no2_aqi_pop_sd/sqrt(45))
z_value
# Here, α = 1 - Conf.Interval = 1 - 0.95 = 0.05
# We get that, the value of z is greater than critical value of z (+1.64) from z table
# Hence we reject Null Hypothesis.
# That means our Actual mean value is greater than sample mean taken.
# From our one-tailed z-test above, we can infer the same.
# H - Alternative is the correct Hypothesis.
# t - test: We want a min sample size of less than 30 for t test
# Let our sample size be 25
set.seed(7)
no2_aqi_rs_t <- pol[sample(nrow(pol), size=25), ]$no2.aqi
no2_aqi_rs_t
qqnorm(no2_aqi_rs_t)
qqline(no2_aqi_rs_t)
# Since the data lies close to the line y=x and has no big deviations from the line, it’s fine to consider the sample as coming from a normal distribution. We can proceed further with our hypothesis test.
no2_aqi_rs_t_mean = mean(no2_aqi_rs_t)
no2_aqi_rs_t_sd = sd(no2_aqi_rs_t)
no2_aqi_pop_mean
no2_aqi_rs_t_mean
no2_aqi_rs_t_sd
t.test(no2_aqi_rs_t,
alternative = "less",
mu = no2_aqi_pop_mean,
conf.level = 0.95)
# Verify t - Value
# We know that, t = (xi-μ)/(s/(√n)) - xi is sample mean, μ is population mean
# s is sample standard deviation, n is sample size
t_value = (no2_aqi_rs_t_mean - no2_aqi_pop_mean)/(no2_aqi_rs_t_sd/sqrt(25))
t_value
# Here, α = 1 - Conf.Interval = 1 - 0.95 = 0.05
# We get that, the value of t is less than critical value of t = 1.711 (as df=n-1=24, α=0.05)
# Hence we reject Null Hypothesis.
# That means our Actual mean value is greater than sample mean taken.
# From our one-tailed t-test above, we can infer the same.
# H - Alternative is the correct Hypothesis.
set.seed(5)
x<-sample(pol$no2.mean,size=50)
y<-sample(pol$so2.mean,size=50)
relation <- lm(y~x)
# Plot the chart.
plot(y,x,col = "blue",main = "NO2 mean & SO2 mean Regression",
abline(relation),cex = 1.3,pch = 16,xlab = "NO2 mean",ylab ="SO2 mean")
set.seed(5)
x <- sample(pol$no2.mean,size=50)
y <- sample(pol$so2.mean,size=50)
relation <- lm(y~x)
# Plot the chart.
plot(y, x, col = "blue", main = "NO2 mean & SO2 mean Regression", abline(relation), cex = 1.3, pch = 16, xlab="NO2 mean", ylab="SO2 mean")
# Correlation
set.seed(5)
x <- sample(pol$no2.mean,size=50)
y <- sample(pol$so2.mean,size=50)
relation <- lm(y~x)
# Plot the chart.
plot(y, x, col = "blue",main = "NO2 mean & SO2 mean Regression", abline(relation), cex = 1.3, pch = 16, xlab = "NO2 mean", ylab = "SO2 mean")
correlation <- cor.test(pol$no2.mean, pol$so2.mean, method = "pearson")
correlation
# F - Test
var.test(x, y)
# Chi Square Test
chi2 <- chisq.test(x,y)
chi2
install.packages(c("devtools"))
install.packages(c("devtools"))
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
devtools::install_github("ldurazo/kaggler")
sum(is.na (d$score))
sum(is.na (df$score))
(is.na (df$score))
is.na(df$score)
sum(is.na(df$score))
sum(is.na(df$score))*100/nrow(df)
library(readr)
library(kaggler)
library(ggplot2)
library(tidyverse)
kgl_auth(username="vineethreddi",key="f39f90e2cb1a8da2a58c0b63bba271a8")
response <- kgl_datasets_download_all(owner_dataset = "padhmam/qs-world-university-rankings-2017-2022")
download.file(response[["url"]], "temp.zip", mode="wb")
unzip_result <- unzip("temp.zip", exdir = "data/", overwrite = TRUE)
df <- read_csv("data/qs-world-university-rankings-2017-to-2022-V2.csv")
df
sum(is.na(df$score))*100/nrow(df)
install.packages("mpg")
data(mpg)
install.packages("MPGE")
data(mpg)
installed.packages("ggplot2", dependencies=TRUE)
install.packages("ggplot2", dependencies=TRUE)
install.packages("arules", dependencies = TRUE)
library(viridis)
library(arules)
library(TSP)
library(data.table)
library(dplyr)
library(devtools)
library(purrr)
library(tidyr)
library(arulesViz)
setwd("C:/Users/Amith Nandivada/Desktop/Amith/MS/CUB/Boulder Course Material/Fall23/Machine Learning/Assignment/Exam/")
#setwd("/content/")
previous_items_df <- read.transactions("transactional_exam_data.csv",
rm.duplicates = FALSE,
format = "basket",  ##if you use "single" also use cols=c(1,2)
sep=",",  ## csv file
cols=NULL)
inspect(previous_items_df)
purchased_items_rules = arules::apriori(previous_items_df, parameter = list(support=0.01,
confidence=0.01,minlen=2))
inspect(purchased_items_rules)
# Find which terms are more frequent.
itemFrequencyPlot(previous_items_df, topN=30, type="absolute", cex.names = 0.6)
# Print the item frequencies
item_frequencies <- itemFrequency(previous_items_df)
item_frequencies_df <- as.data.frame(item_frequencies)
print(item_frequencies_df)
# Sorting the rules with lift, support, confidence
SortedRules_lift <- sort(purchased_items_rules, by="lift", decreasing=TRUE)
inspect(SortedRules_lift[1:20])
SortedRules_support <- sort(purchased_items_rules, by="support", decreasing=TRUE)
inspect(SortedRules_support[1:20])
SortedRules_confidence <- sort(purchased_items_rules, by="confidence", decreasing=TRUE)
inspect(SortedRules_confidence[1:20])
# Visualize top rules sorted on the basis of lift.
subrules_lift <- head(sort(SortedRules_lift, by="lift"), 15)
# plot(subrules_lift)
plot(subrules_lift, method="graph", engine="htmlwidget")
# Visualize top 15 rules sorted on the basis of support
subrules_support <- head(sort(SortedRules_support, by="support"),15)
plot(subrules_support)
plot(subrules_support, method="graph", engine="htmlwidget")
# Visualize top 15 rules sorted on the basis of confidence
subrules_confidence <- head(sort(SortedRules_confidence, by="confidence"),15)
plot(subrules_confidence)
plot(subrules_confidence, method="graph", engine="htmlwidget")
plot(subrules_confidence, method="graph", engine="htmlwidget")
library(viridis)
library(arules)
library(TSP)
library(data.table)
library(dplyr)
library(devtools)
library(purrr)
library(tidyr)
library(arulesViz)
setwd("C:/Users/Amith Nandivada/Desktop/Amith/MS/CUB/Boulder Course Material/Fall23/Machine Learning/Assignment/Exam/")
#setwd("/content/")
previous_items_df <- read.transactions("transactional_exam_data.csv",
rm.duplicates = FALSE,
format = "basket",  ##if you use "single" also use cols=c(1,2)
sep=",",  ## csv file
cols=NULL)
inspect(previous_items_df)
purchased_items_rules = arules::apriori(previous_items_df, parameter = list(support=0.01,
confidence=0.01,minlen=2))
inspect(purchased_items_rules)
# Find which terms are more frequent.
itemFrequencyPlot(previous_items_df, topN=30, type="absolute", cex.names = 0.6)
# Print the item frequencies
item_frequencies <- itemFrequency(previous_items_df)
item_frequencies_df <- as.data.frame(item_frequencies)
print(item_frequencies_df)
# Sorting the rules with lift, support, confidence
SortedRules_lift <- sort(purchased_items_rules, by="lift", decreasing=TRUE)
inspect(SortedRules_lift[1:20])
# (summary(SortedRules_lift))
SortedRules_support <- sort(purchased_items_rules, by="support", decreasing=TRUE)
inspect(SortedRules_support[1:20])
SortedRules_confidence <- sort(purchased_items_rules, by="confidence", decreasing=TRUE)
inspect(SortedRules_confidence[1:20])
# Visualize top rules sorted on the basis of lift.
subrules_lift <- head(sort(SortedRules_lift, by="lift"), 15)
plot(subrules_lift)
plot(subrules_lift, method="graph", engine="htmlwidget")
# Visualize top 15 rules sorted on the basis of support
subrules_support <- head(sort(SortedRules_support, by="support"),15)
plot(subrules_support)
plot(subrules_support, method="graph", engine="htmlwidget")
# Visualize top 15 rules sorted on the basis of confidence
subrules_confidence <- head(sort(SortedRules_confidence, by="confidence"),15)
plot(subrules_confidence)
plot(subrules_confidence, method="graph", engine="htmlwidget")
#In the context of my Association Rule Mining (ARM) analysis, I efficiently organized the identified rules based on various criteria,
#providing a comprehensive understanding of the inherent patterns in customer purchasing behavior. By sorting rules according to lift,
#support, and confidence, I gained insights into the strength and significance of associations between items. For example, rules with
#high lift values, such as {Smartwatch} => {Shoes}, indicate a significant increase in the likelihood of purchasing Shoes when a
#Smartwatch is bought. Conversely, rules sorted by confidence, like {Clothes} => {Makeup}, reveal a perfect association, signifying
#that customers who buy Clothes almost always purchase Makeup as well. These sorted rules offer a valuable guide for strategic
#decision-making, enabling me to prioritize and focus on the most impactful associations in optimizing product placement, marketing
#strategies, and customer recommendations.
#The rule {Cooker} => {Phone} suggests that customers who purchase a "Cooker" are highly likely to also buy a "Phone," presenting an
#opportunity to bundle or promote these items together. The rule {Blender} => {Smartphone} indicates a strong association between
#"Blender" and "Smartphone" purchases, suggesting cross-category promotions or targeted marketing strategies. Moreover, the rule
#{Clothing} => {Makeup} with a high lift of 7.22 implies a significant synergy between buying "Clothing" and "Makeup." This finding
#could guide retail strategies, such as creating special offers for combined purchases. Additionally, the rule {Furniture} => {Books}
#reveals a notable association, potentially leading to strategies that enhance the shopping experience by co-locating these items in
#physical stores or recommending them online. These identified rules provide actionable insights into customer behavior and offer
#strategic directions for enhancing product placement, promotions, and personalized recommendations to maximize sales and customer
#satisfaction.
